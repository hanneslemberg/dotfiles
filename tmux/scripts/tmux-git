# tmux-git
# Script for showing current Git branch in Tmux status bar
#
# Created by Oliver Etchebarne - http://drmad.org/ with contributions
# from many github users. Thank you all.

# Use a different readlink according the OS.
# Kudos to https://github.com/npauzenga for the PR
if [[ `uname` == 'Darwin' ]]; then
    # Mac
    READLINK='greadlink -e'
else
    # Linux
    READLINK='readlink -e'
fi

# Location of the status on tmux bar: left or right
TMUX_STATUS_LOCATION='right'

# Status for where you are out of a repo. Default is your pre-existing status 
# line. 
# Kudos to https://github.com/danarnold for the idea.
TMUX_OUTREPO_STATUS=`tmux show -vg status-$TMUX_STATUS_LOCATION`

# Function to build the status line. You need to define the $TMUX_STATUS 
# variable.
TMUX_STATUS_DEFINITION() {
    # You can use any tmux status variables, and $GIT_BRANCH, $GIT_DIRTY, 
    # $GIT_FLAGS ( which is an array of flags ), and pretty much any variable
    # used in this script :-)
    
    GIT_BRANCH="${GIT_BRANCH/feature\//f/}"
    
    TMUX_STATUS="$GIT_BRANCH$GIT_FLAGS"

}

# Taken from http://aaroncrane.co.uk/2009/03/git_branch_prompt/
find_git_repo() {
    local dir=.
    until [ "$dir" -ef / ]; do
        if [ -f "$dir/.git/HEAD" ]; then
            GIT_REPO=`$READLINK $dir`/
            return
        fi
        dir="../$dir"
    done
    GIT_REPO=''
    return
}

find_git_branch() {
    head=$(< "$1/.git/HEAD")
    if [[ $head == ref:\ refs/heads/* ]]; then
        GIT_BRANCH=${head#*/*/}
    elif [[ $head != '' ]]; then
        GIT_BRANCH='(detached)'
    else
        GIT_BRANCH='(unknown)'
    fi
}

# Taken from https://github.com/jimeh/git-aware-prompt
find_git_dirty() {
  local status=$(git status --porcelain 2> /dev/null)
  if [[ "$status" != "" ]]; then
    GIT_DIRTY='*'
  else
    GIT_DIRTY=''
  fi
}

find_git_stash() {
    if [ -e "$1/.git/refs/stash" ]; then    
        GIT_STASH='stash'
    else
        GIT_STASH=''
    fi
}

update_tmux() {

    # The trailing slash is for avoiding conflicts with repos with 
    # similar names. Kudos to https://github.com/tillt for the bug report
    CWD=`$READLINK "$(pwd)"`/

    LASTREPO_LEN=${#TMUX_GIT_LASTREPO}

    if [[ $TMUX_GIT_LASTREPO ]] && [ "$TMUX_GIT_LASTREPO" = "${CWD:0:$LASTREPO_LEN}" ]; then
        GIT_REPO="$TMUX_GIT_LASTREPO"

        # Get the info
        find_git_branch "$GIT_REPO"
        find_git_stash "$GIT_REPO"
        find_git_dirty

        GIT_FLAGS=$(parse_git_dirty)
        
        TMUX_STATUS_DEFINITION
        
        if [ "$GIT_DIRTY" ]; then 
            tmux set-window-option status-$TMUX_STATUS_LOCATION-style bright > /dev/null
        else
            tmux set-window-option status-$TMUX_STATUS_LOCATION-style none > /dev/null
        fi
        
        tmux set-window-option status-$TMUX_STATUS_LOCATION "$TMUX_STATUS" > /dev/null            

    else
        find_git_repo
        
        if [[ $GIT_REPO ]]; then
            export TMUX_GIT_LASTREPO="$GIT_REPO"
            update_tmux
        else
            # Be sure to unset GIT_DIRTY's bright when leaving a repository.
            # Kudos to https://github.com/danarnold for the idea
            tmux set-window-option status-$TMUX_STATUS_LOCATION-style none > /dev/null

            # Set the out-repo status
            tmux set-window-option status-$TMUX_STATUS_LOCATION "$TMUX_OUTREPO_STATUS" > /dev/null
        fi
    fi

}

function parse_git_dirty {                                                      
     status=`git status 2>&1 | tee`                                              
     dirty=`echo -n "${status}" 2> /dev/null | grep "modified:" &> /dev/null; echo "$?"`
     untracked=`echo -n "${status}" 2> /dev/null | grep "Untracked files" &> /dev/null; echo "$?"`
     ahead=`echo -n "${status}" 2> /dev/null | grep "Your branch is ahead of" &> /dev/null; echo "$?"`
     newfile=`echo -n "${status}" 2> /dev/null | grep "new file:" &> /dev/null; echo "$?"`
     renamed=`echo -n "${status}" 2> /dev/null | grep "renamed:" &> /dev/null; echo "$?"`
     deleted=`echo -n "${status}" 2> /dev/null | grep "deleted:" &> /dev/null; echo "$?"`
     bits=''                                                                     
     if [ "${renamed}" == "0" ]; then                                            
         bits=">${bits}"                                                         
     fi                                                                          
     if [ "${ahead}" == "0" ]; then                                              
         bits="*${bits}"                                                         
     fi                                                                          
     if [ "${newfile}" == "0" ]; then                                            
         bits="+${bits}"                                                         
     fi                                                                          
     if [ "${untracked}" == "0" ]; then                                          
         bits="?${bits}"                                                         
     fi                                                                          
     if [ "${deleted}" == "0" ]; then                                            
         bits="x${bits}"                                                         
     fi                                                                          
     if [ "${dirty}" == "0" ]; then                                              
         bits="!${bits}"                                                         
     fi                                                                          
     if [ ! "${bits}" == "" ]; then                                              
         echo " ${bits}"                                                         
     else                                                                        
         echo ""                                                                 
     fi                                                                          
}                

# Update the prompt for execute the script
PROMPT_COMMAND="update_tmux; $PROMPT_COMMAND"

