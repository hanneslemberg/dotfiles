scriptencoding utf-8
set encoding=utf-8
set nocompatible
set background=dark " assume a dark background


call plug#begin('~/.vim/plugged')
Plug 'prabirshrestha/async.vim'
Plug 'prabirshrestha/asyncomplete.vim'
Plug 'prabirshrestha/asyncomplete-lsp.vim'
Plug 'prabirshrestha/vim-lsp'
Plug 'arnaud-lb/vim-php-namespace'
call plug#end()

" let g:film_noir_color='green' " also: 'green', 'blue' (default)
" colorscheme film_noir 
let mapleader=","

filetype plugin indent on

syntax on 

set autoindent
set autoread
set colorcolumn=80
set expandtab
set hlsearch
set iminsert=0
set imsearch=0
set incsearch
set laststatus=2
set noswapfile
set nowrap
set number
set ruler 
set shiftwidth=4
set showcmd
set smartcase
set smartindent
set tabstop=4
set textwidth=0
set wrapmargin=0
set fo+=l " disable auto wrapping
set fo-=t
set makeprg=VIMFILE=%\ make
" Appearance 
" let &t_ZH="\e[3m"
" let &t_ZR="\e[23m"

" highlight lCursor guifg=NONE guibg=Cyan


" highlight OverLength ctermbg=black ctermfg=red
" match OverLength /\%81v.\+/

" set term=screen-256color-italics

map-silent <esc><esc> :noh<cr>

" share clipboard between instances
set clipboard=unnamedplus

set cursorline
highlight CursorLine cterm=NONE ctermfg=NONE ctermbg=233 guifg=NONE guibg=#121212
autocmd InsertEnter * highlight CursorLine cterm=NONE ctermfg=NONE ctermbg=234 guifg=NONE guibg=#1c1c1c
autocmd InsertLeave * highlight CursorLine cterm=NONE ctermfg=NONE ctermbg=233 guifg=NONE guibg=#121212


" tags
set tags=./tags;/
set shortmess+=I

" Search down into subfolders
" Provides tab-completion for all file-related tasks
set path+=src,**

" Display all matching files when we tab complete
set wildmenu

" NOW WE CAN:
" - Use ^] to jump to tag under cursor
" - Use g^] for ambiguous tags
" - Use ^t to jump back up the tag stack

" AUTOCOMPLETE:

" The good stuff is documented in |ins-completion|

" HIGHLIGHTS:
" - ^x^n for JUST this file
" - ^x^f for filenames (works with our path trick!)
" - ^x^] for tags only
" - ^n for anything specified by the 'complete' option

" NOW WE CAN:
" - Use ^n and ^p to go back and forth in the suggestion list


" FILE BROWSING:

" Tweaks for browsing
let g:netrw_banner=0        " disable annoying banner
let g:netrw_browse_split=4  " open in prior window
let g:netrw_altv=1          " open splits to the right
let g:netrw_liststyle=3     " tree view
let g:netrw_list_hide=netrw_gitignore#Hide()
let g:netrw_list_hide.=',\(^\|\s\s\)\zs\.\S\+'

" NOW WE CAN:
" - :edit a folder to open a file browser
" - <CR>/v/t to open in an h-split/v-split/tab
" - check |netrw-browse-maps| for more mappings

" SNIPPETS:

" Read an empty HTML template and move cursor to title
nnoremap ,html :-1read $HOME/.vim/.skeleton.html<CR>3jwf>a

" set makeprg=bundle\ exec\ rspec\ -f\ QuickfixFormatter
" NOW WE CAN:
" - Run :make to run RSpec
" - :cl to list errors
" - :cc# to jump to error by number
" - :cn and :cp to navigate forward and back
set rtp+=/usr/local/opt/fzf

" highlight tabs
set list
set listchars=tab:!·,trail:·

nmap <leader>b :make! test-quick<CR>
nmap <leader>r :make! run<CR>
nmap <leader>f :w<CR>:silent :make! format-file<CR>:e<CR>:redraw!<CR>

" file specific settings
" typescript
au BufRead,BufNewFile *.ts setlocal filetype=javascript
au FileType javascript setlocal tags='./.src.ts.tags;/,./.vendor.ts.tags;/'

" php
au BufRead,BufNewFile *.php setlocal filetype=php
au FileType php setlocal tags=./.src.php.tags;/\ ./.vendor.php.tags;/\ ./.php.tags;/

" log files
autocmd BufRead,BufNewFile *.log setlocal filetype=log
au FileType log setlocal nowrap
au FileType log setlocal nonumber

" go
au BufRead,BufNewFile *.go setlocal filetype=go
au FileType go setlocal path+=$HOME/go/src/
" au FileType go nmap <leader>f :w<CR>:!FORMATFILE="%" make format<CR>:e<CR>
au FileType go setlocal tags=go.tags;/

autocmd FileType js,ts,php let b:comment_leader = '// '
autocmd FileType sh let b:comment_leader = '# '
autocmd FileType conf,fstab let b:comment_leader = '# '
autocmd FileType vim let b:comment_leader = '" '

noremap <silent> <leader>cc :<C-B>silent <C-E>s/^/<C-R>=escape(b:comment_leader,'\/')<CR>/<CR>:nohlsearch<CR>
noremap <silent> <leader>cu :<C-B>silent <C-E>s/^\V<C-R>=escape(b:comment_leader,'\/')<CR>//e<CR>:nohlsearch<CR>

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

" load fzf plugin
source $HOME/.vim/plugin/fzf.vim
nmap <leader>p :FZF<CR>

imap <C-Space> <Plug>(asyncomplete_force_refresh)
imap <Nul> <Plug>(asyncomplete_force_refresh)

function! IPhpInsertUse()
call PhpInsertUse()
    call feedkeys('a',  'n')
endfunction

autocmd FileType php inoremap <leader>u <Esc>:call IPhpInsertUse()<CR>
autocmd FileType php noremap <leader>u :call PhpInsertUse()<CR>
